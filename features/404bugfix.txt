# Prompt: GitHub Pages Statik Site 404 Hatalarını ve Eksik Görselleri Düzeltme

```markdown
# GitHub Pages Statik Deployment Asset Hatalarını Çözme

## Tespit Edilen Sorunlar

GitHub Pages deployment'ınızdaki Console hatalarını incelediğimde şu tür sorunlar tespit ettim:

1. **Favicon ve Manifest Hataları**:
   - `/favicons/favicon-active.ico` - 404 Not Found
   - `/favicons/favicon-inactive.ico` - 404 Not Found
   - `/assets/images/favicon/site.webmanifest` - 404 Not Found

2. **Font Dosyası Hataları**:
   - `/assets/fonts/NexaHeavy.woff2` - 404 Not Found
   - `/assets/fonts/NexaHeavy.woff` - 404 Not Found
   - `/assets/fonts/NexaHeavy.ttf` - 404 Not Found

3. **Görsel Hataları**:
   - `/assets/images/pide1.jpg` - 404 Not Found
   - `/assets/images/pide2.jpg` - 404 Not Found
   - `/assets/images/pide3.jpg` - 404 Not Found
   - `/assets/images/web_pide-05.jpg` - 404 Not Found

4. **Next.js RSC Prefetch Hataları**:
   - `hakkimizda.txt?_rsc=1p2e6` gibi dosyaların 404 hatası

## Ana Sorun ve Çözüm Stratejisi

Temel sorun, statik dosya yollarınızın GitHub Pages'teki repository adını (`/pidebypide`) içermemesi. Ayrıca bazı statik varlıklarınızın doğru konumda bulunmaması da soruna yol açıyor olabilir.

### Çözüm Adımları:

## 1. Next.js Yapılandırmasını Düzenleyin

`next.config.mjs` dosyanızı şu şekilde güncelleyin:

```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  basePath: '/pidebypide',
  assetPrefix: '/pidebypide/',
  trailingSlash: true,
  images: {
    unoptimized: true,
  },
  // Statik varlıkları düzgün işlemek için
  webpack: (config) => {
    return config;
  },
};

export default nextConfig;
```

## 2. Statik Varlıkları Doğru Konuma Taşıyın

Projenizin public dizinine statik varlıkların doğru konumda olduğunu kontrol et.

## 3. Site Manifest Dosyasını Oluşturun

`public/assets/images/favicon/site.webmanifest` dosyasını aşağıdaki içerikle oluşturun:

```json
{
  "name": "Pide by Pide",
  "short_name": "Pide by Pide",
  "icons": [
    {
      "src": "/pidebypide/assets/images/favicon/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/pidebypide/assets/images/favicon/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "display": "standalone"
}
```

## 4. Favicon Referanslarını Düzeltin

`src/app/layout.tsx` dosyasında favicon referanslarını güncelleyin:

```tsx
<link rel="apple-touch-icon" sizes="180x180" href="/pidebypide/assets/images/favicon/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/pidebypide/assets/images/favicon/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/pidebypide/assets/images/favicon/favicon-16x16.png" />
<link rel="manifest" href="/pidebypide/assets/images/favicon/site.webmanifest" />
<link rel="mask-icon" href="/pidebypide/assets/images/favicon/safari-pinned-tab.svg" color="#5bbad5" />
```

## 5. Görsel Referansları Düzeltme Bileşeni

`src/components/Image.tsx` adında bir yardımcı bileşen oluşturun:

```tsx
import NextImage, { ImageProps as NextImageProps } from 'next/image';

interface ImageProps extends Omit<NextImageProps, 'src'> {
  src: string;
}

export default function Image({ src, ...props }: ImageProps) {
  // Eğer src zaten http veya data: ile başlıyorsa değiştirme
  if (src.startsWith('http') || src.startsWith('data:') || src.startsWith('/pidebypide')) {
    return <NextImage src={src} {...props} />;
  }
  
  // Göreli yollara basePath ekle
  const correctedSrc = `/pidebypide${src.startsWith('/') ? '' : '/'}${src}`;
  return <NextImage src={correctedSrc} {...props} />;
}
```

## 6. Font Yükleme Stratejisini Değiştirin

Font dosyalarını CSS ile yüklemek için `src/app/globals.css` dosyasını güncelleyin:

```css
@font-face {
  font-family: 'Nexa Heavy';
  src: url('/pidebypide/assets/fonts/NexaHeavy.woff2') format('woff2'),
       url('/pidebypide/assets/fonts/NexaHeavy.woff') format('woff'),
       url('/pidebypide/assets/fonts/NexaHeavy.ttf') format('truetype');
  font-weight: 900;
  font-style: normal;
  font-display: swap;
}

/* Diğer fontlar için de aynı şekilde yapın */
```

## 7. Statik HTML Referansları İçin Bir Script Ekleyin

Build işlemi sonrası out/ klasöründeki tüm HTML dosyalarındaki yolları düzeltmek için bir post-build script oluşturun:

```javascript
// scripts/fix-asset-paths.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const outDir = path.join(__dirname, '../out');

function processHtmlFiles(directory) {
  const files = fs.readdirSync(directory);
  
  files.forEach(file => {
    const filePath = path.join(directory, file);
    const stats = fs.statSync(filePath);
    
    if (stats.isDirectory()) {
      processHtmlFiles(filePath);
    } else if (file.endsWith('.html')) {
      let content = fs.readFileSync(filePath, 'utf-8');
      
      // Düzeltilecek asset yolları
      content = content.replace(/src="\/assets\//g, 'src="/pidebypide/assets/');
      content = content.replace(/href="\/assets\//g, 'href="/pidebypide/assets/');
      content = content.replace(/url\(\/assets\//g, 'url(/pidebypide/assets/');
      content = content.replace(/src="\/favicons\//g, 'src="/pidebypide/favicons/');
      content = content.replace(/href="\/favicons\//g, 'href="/pidebypide/favicons/');
      
      fs.writeFileSync(filePath, content, 'utf-8');
    }
  });
}

processHtmlFiles(outDir);
console.log('Asset paths fixed in HTML files!');
```

## 8. package.json'da Build Komutunu Güncelle

```json
"scripts": {
  "build": "next build && node scripts/fix-asset-paths.mjs",
  // diğer scriptler...
}
```

## 9. RSC Prefetch Hatalarını Çözme

Bu hatalar Next.js'in prefetching mekanizmasından kaynaklanıyor ve genellikle zararsızdır. Gerekirse aşağıdaki ayarı ekleyebilirsiniz:

```tsx
// src/app/layout.tsx içinde
export const dynamic = 'force-static';
```

## 10. .nojekyll Dosyası Ekleyin

GitHub Actions workflow'una `.nojekyll` dosyası eklediğinizden emin olun:

```yaml
- name: Add .nojekyll file
  run: touch out/.nojekyll
```

## Yapılandırma Sonrası Dikkat Edilmesi Gerekenler

1. Tüm statik dosyaların `public/` dizininin altına doğru yerleştirildiğinden emin olun
2. Derleme sonrası `out/` klasöründen GitHub Pages'e doğru şekilde deploy edildiğini kontrol edin
3. Harici kaynakları (örn. CDN'lerden yüklenen dosyalar) doğru URL'lerle çağırdığınızdan emin olun

Bu düzeltmelerden sonra, GitHub Pages'te görseller ve diğer statik varlıklar doğru şekilde yüklenmelidir. Herhangi bir sorun devam ederse, sorunu daha spesifik olarak ele alabiliriz.