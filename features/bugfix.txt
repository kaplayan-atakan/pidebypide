# Prompt: Next.js Navigasyon Hatası Çözümü - Cannot read properties of null (reading 'removeChild')

```markdown
# Next.js Navigasyon DOM Hatası Çözümü

## Sorun Analizi
PideByPide projesinde header menüdeki butonlara tıkladığınızda uygulama crash oluyor ve `Cannot read properties of null (reading 'removeChild')` hatası alıyorsunuz. Bu hata genellikle React DOM'un null bir node'u manipüle etmeye çalıştığında ortaya çıkar ve şu sebeplerden kaynaklanabilir:

1. DOM manipülasyonu yapan third-party bir kütüphane React tarafından yönetilen DOM'u beklenmedik şekilde değiştiriyor
2. Client ve server arasında hydration uyumsuzlukları
3. Bir komponentin unmount olması sırasında DOM referansları doğru temizlenmiyor
4. Event listener'ların temizlenmemesi veya olmayan DOM elementlerine erişmeye çalışması

## Çözüm Adımları

### 1. Header Menü Bileşenini İnceleyin

Öncelikle mevcut header/navbar bileşeninizde React dışı DOM manipülasyonu yapan herhangi bir kod olup olmadığını kontrol edin:

```tsx
// Mevcut menü bileşeninizi kontrol edin
// Bu tür kodlar sorun yaratabilir:
// document.querySelector(), jQuery manipülasyonları, vb.
```

### 2. Güvenli Client-Side Navigation

Header'ınızdaki navigasyon butonlarını pure React yaklaşımıyla yeniden düzenleyin:

```tsx
// src/components/Header.tsx
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

export default function Header() {
  const pathname = usePathname();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  
  // Sayfa değişiminde tüm açık menüleri kapat
  useEffect(() => {
    setIsMenuOpen(false);
  }, [pathname]);
  
  // Mobil için menü toggling
  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };
  
  return (
    <header className="bg-white shadow-sm">
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          {/* Logo */}
          <Link href="/">
            <span className="flex items-center">
              <img 
                src="/images/logo.png" 
                alt="Pide By Pide" 
                className="h-12 w-auto"
              />
            </span>
          </Link>
          
          {/* Mobil Menü Butonu */}
          <button 
            className="md:hidden p-2" 
            onClick={toggleMenu}
            aria-label={isMenuOpen ? 'Menüyü kapat' : 'Menüyü aç'}
          >
            <span className="block w-6 h-0.5 bg-gray-800 mb-1"></span>
            <span className="block w-6 h-0.5 bg-gray-800 mb-1"></span>
            <span className="block w-6 h-0.5 bg-gray-800"></span>
          </button>
          
          {/* Menü - CSS ile manipüle etmek yerine conditional rendering kullanın */}
          <nav className={`absolute md:relative top-16 md:top-0 left-0 w-full md:w-auto bg-white md:bg-transparent z-50 shadow-lg md:shadow-none transition-all ${isMenuOpen ? 'block' : 'hidden md:block'}`}>
            <ul className="flex flex-col md:flex-row md:items-center">
              <NavItem href="/kurumsal" label="KURUMSAL" pathname={pathname} />
              <NavItem href="/kariyer" label="KARİYER" pathname={pathname} />
              <NavItem href="/urunler" label="ÜRÜNLER" pathname={pathname} />
              <NavItem href="/franchise" label="FRANCHISE" pathname={pathname} />
              <NavItem href="/subeler" label="ŞUBELER" pathname={pathname} />
              <NavItem href="/iletisim" label="İLETİŞİM" pathname={pathname} />
            </ul>
          </nav>
        </div>
      </div>
    </header>
  );
}

// Ayrı NavItem bileşeni - daha iyi kod organizasyonu
function NavItem({ href, label, pathname }: { href: string; label: string; pathname: string }) {
  const isActive = pathname === href || pathname.startsWith(`${href}/`);
  
  return (
    <li className="block md:inline-block">
      <Link 
        href={href} 
        className={`block px-4 py-3 md:py-2 hover:text-primary-600 transition-colors ${isActive ? 'text-primary-600 font-bold' : 'text-gray-800'}`}
      >
        {label}
      </Link>
    </li>
  );
}
```

### 3. JetMenu Veya Diğer Bir Menü Kütüphanesi Kullanıyorsanız

Eski HTML yapınızda JetMenu gibi jQuery tabanlı bir menü kütüphanesi kullandığınızı görüyorum. Bu tür kütüphanelerin React ile uyumsuzluk yaratabileceğini unutmayın:

```tsx
// src/components/Menu.tsx
'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

export default function Menu() {
  const pathname = usePathname();
  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);
  const menuRef = useRef<HTMLDivElement>(null);
  
  // Sayfa değiştiğinde veya dışarı tıklandığında menüyü kapat
  useEffect(() => {
    setActiveSubmenu(null);
    
    function handleClickOutside(event: MouseEvent) {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setActiveSubmenu(null);
      }
    }
    
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [pathname]);
  
  // Mega menü için toggle
  const toggleSubmenu = (menuId: string) => {
    setActiveSubmenu(activeSubmenu === menuId ? null : menuId);
  };
  
  return (
    <div ref={menuRef} className="w-full">
      <ul className="flex flex-col md:flex-row">
        {/* Kurumsal Dropdown */}
        <li className="relative">
          <button 
            onClick={() => toggleSubmenu('kurumsal')} 
            className="flex items-center justify-between w-full px-4 py-2 text-gray-800 hover:text-primary-600"
          >
            KURUMSAL
            <svg xmlns="http://www.w3.org/2000/svg" className={`h-4 w-4 ml-1 transition-transform ${activeSubmenu === 'kurumsal' ? 'rotate-180' : ''}`} viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
          
          {activeSubmenu === 'kurumsal' && (
            <div className="absolute left-0 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg z-10">
              <Link href="/hakkimizda" className="block px-4 py-2 text-gray-800 hover:bg-gray-100">• Hakkımızda</Link>
              <Link href="/sertifika" className="block px-4 py-2 text-gray-800 hover:bg-gray-100">• Sertifikalarımız</Link>
            </div>
          )}
        </li>
        
        {/* Diğer menü öğeleri */}
        <li><Link href="/kariyer" className="block px-4 py-2 text-gray-800 hover:text-primary-600">KARİYER</Link></li>
        <li><Link href="/urunler" className="block px-4 py-2 text-gray-800 hover:text-primary-600">ÜRÜNLER</Link></li>
        <li><Link href="/franchise" className="block px-4 py-2 text-gray-800 hover:text-primary-600">FRANCHISE</Link></li>
        <li><Link href="/subeler" className="block px-4 py-2 text-gray-800 hover:text-primary-600">ŞUBELER</Link></li>
        <li><Link href="/iletisim" className="block px-4 py-2 text-gray-800 hover:text-primary-600">İLETİŞİM</Link></li>
      </ul>
    </div>
  );
}
```

### 4. Sayfa Geçişlerinde Client-Side State Koruma

Next.js'in sayfa yönlendirmelerinde sorun yaşanıyorsa, geçişleri daha güvenli hale getirebilirsiniz:

```tsx
// src/app/layout.tsx
'use client';

import { useState, useEffect } from 'react';
import { usePathname } from 'next/navigation';
import Header from '@/components/Header';
import Footer from '@/components/Footer';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const pathname = usePathname();
  
  // Sayfa geçişlerini izle
  useEffect(() => {
    // Sayfa değiştiğinde temizlik işlemleri
    return () => {
      // Event listener temizliği burada yapılabilir
    };
  }, [pathname]);
  
  return (
    <html lang="tr">
      <body>
        <div className="flex flex-col min-h-screen">
          <Header />
          <main className="flex-grow">
            {children}
          </main>
          <Footer />
        </div>
      </body>
    </html>
  );
}
```

### 5. Hydration Uyumsuzluklarını Çözme

Eğer sunucu tarafında render edilen içerik client-side'da farklıysa (örneğin, tarih/saat gibi), bu tür hydration sorunları yaşanabilir:

```tsx
'use client';
import { useState, useEffect } from 'react';

function ClientOnlyComponent({ children }: { children: React.ReactNode }) {
  const [isClient, setIsClient] = useState(false);
  
  useEffect(() => {
    setIsClient(true);
  }, []);
  
  return isClient ? <>{children}</> : null;
}
```

### 6. useRouter yerine Link Kullanımı

Eğer manüel yönlendirmeler yapıyorsanız, bunları Link komponenti ile değiştirin:

```tsx
// YANLIŞ - useRouter ile programatik yönlendirme
const router = useRouter();
const handleClick = () => {
  // Bu yöntem bazen sorunlara yol açabilir
  router.push('/urunler');
}

// DOĞRU - Link komponenti
<Link href="/urunler">ÜRÜNLER</Link>
```

## Muhtemel Ek Kontroller

1. **DOM Erişiminde useRef Kullanın**: querySelector veya getElementById yerine useRef hook'unu kullanın.

2. **Event Listener'ları Temizleyin**: useEffect içinde eklenen tüm event listener'lar temizlenmelidir.

3. **Component Unmounting İşlemlerini Kontrol Edin**: Unmount olan bileşenlerde DOM işlemleri yapılmadığından emin olun.

4. **Kütüphane Kullanımını Modernleştirin**: jQuery ve eski DOM manipülasyon kütüphanelerinden kaçının.

5. **DevTools'da Component Yaşam Döngüsünü İzleyin**: React DevTools ile component yaşam döngüsünü izleyerek sorunlu kodu tespit edebilirsiniz.

6. **CSS Transition'lar yerine React Transition Group Kullanın**: DOM animasyonlarını React Transition Group ile yönetin.

Bu değişiklikleri uyguladıktan sonra, navigasyon hatalarının çözülmesi beklenmektedir. Ek olarak, kodunuzun daha sağlam ve bakımı daha kolay olacaktır.