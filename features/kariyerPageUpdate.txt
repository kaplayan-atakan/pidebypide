# PideByPide "Kariyer" Sayfası Revizyonu

## Görev Tanımı
Mevcut `temp copy\basvuru-formu.html` dosyasını içerik ve tasarım unsurlarını koruyarak Next.js yapısına uygun şekilde revize et. Anasayfada kullanılan tasarım standartları ve responsive design prensiplerini "Kariyer" sayfasına da uygulamalısın.

## Sayfa Yapısı
Yeni dosya yolu: `src/app/kariyer/page.tsx`
URL: `/kariyer`

## Mevcut Durum ve Kaynaklar
1. `temp copy\basvuru-formu.html`: Eski web sitesinden alınan, korunacak içerik ve tasarım elementlerini içeren HTML
2. Anasayfadaki (`src/app/page.tsx`) tasarım standartları referans alınacak
3. Meta verileri: Başlık ve açıklama mevcut HTML'den alınmalı

## Sayfa Yapısı Analizi
Mevcut HTML sayfası iki ana bölüme ayrılmıştır:
1. **Kariyer Bilgileri** (sol taraf, col-md-8): 
   - Şirket tanıtımı ve kariyer fırsatlarıyla ilgili içerik
   - "Neden Pide By Pide?" başlığı altında maddeler
   - Açık pozisyonlar ve detayları (Şef/Aşçı, Garson/Servis Elemanı, Şube Müdürü)

2. **Başvuru Formu** (sağ taraf, col-md-4):
   - İş başvurusu için form

Form özellikleri:
- Ad Soyad (zorunlu)
- E-posta (zorunlu)
- Telefon (zorunlu)
- Başvurulan Pozisyon (zorunlu, dropdown)
- Tercih Edilen Şube (dropdown)
- Deneyim (Yıl) (sayısal input)
- CV Yükleme (dosya yükleme)
- Ek Bilgiler (textarea)
- KVKK onayı (checkbox)
- reCAPTCHA
- Gönder butonu

## Teknik İyileştirme Gereksinimleri

### 1. Metadata Optimizasyonu
```tsx
export const metadata = {
  title: 'Kariyer - Pide By Pide',
  description: 'Pide By Pide ile kariyer yapmak için başvuru formu.',
  keywords: 'Kariyer, iş başvurusu, Pide By Pide kariyer, iş imkanları'
};
```

### 2. Pozisyon Kartları İyileştirmesi
```tsx
// Pozisyon bileşeni
interface PositionCardProps {
  title: string;
  description: string;
  requirements: string[];
}

function PositionCard({ title, description, requirements }: PositionCardProps) {
  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow p-5 mb-4">
      <h3 className="text-lg md:text-xl font-bold text-primary-800 mb-2">{title}</h3>
      <p className="text-gray-700 mb-3">{description}</p>
      <ul className="list-disc list-inside space-y-1 text-gray-600">
        {requirements.map((requirement, index) => (
          <li key={index}>{requirement}</li>
        ))}
      </ul>
    </div>
  );
}
```

### 3. Başvuru Formu Bileşeni
Başvuru formu client-side bir bileşen olmalıdır:

```tsx
'use client';

import { useState, FormEvent } from 'react';
import { useRouter } from 'next/navigation';

export default function JobApplicationForm() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    ad_soyad: '',
    email: '',
    telefon: '',
    pozisyon: '',
    sube: '',
    deneyim: '',
    mesaj: '',
    kvkk: false
  });
  
  const [cvFile, setCvFile] = useState<File | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitResult, setSubmitResult] = useState<{ success: boolean; message: string } | null>(null);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({ ...prev, [name]: checked }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setCvFile(e.target.files[0]);
    }
  };
  
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitResult(null);
    
    // Form verilerini hazırla
    const formDataToSend = new FormData();
    Object.entries(formData).forEach(([key, value]) => {
      formDataToSend.append(key, value.toString());
    });
    
    if (cvFile) {
      formDataToSend.append('cv', cvFile);
    }
    
    try {
      // API endpoint'i buraya gelecek
      const response = await fetch('/api/kariyer-basvuru', {
        method: 'POST',
        body: formDataToSend,
      });
      
      const data = await response.json();
      
      if (response.ok) {
        setSubmitResult({
          success: true,
          message: 'Başvurunuz başarıyla alındı. En kısa sürede sizinle iletişime geçeceğiz.'
        });
        // Formu temizle
        setFormData({
          ad_soyad: '',
          email: '',
          telefon: '',
          pozisyon: '',
          sube: '',
          deneyim: '',
          mesaj: '',
          kvkk: false
        });
        setCvFile(null);
      } else {
        setSubmitResult({
          success: false,
          message: data.message || 'Başvurunuz gönderilirken bir hata oluştu. Lütfen tekrar deneyiniz.'
        });
      }
    } catch (error) {
      setSubmitResult({
        success: false,
        message: 'Bağlantı hatası. Lütfen internet bağlantınızı kontrol edip tekrar deneyiniz.'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div className="bg-white rounded-lg shadow p-5 md:p-6 h-full">
      <h2 className="text-xl md:text-2xl font-bold text-primary-800 mb-4">İş Başvurusu</h2>
      
      {submitResult && (
        <div className={`mb-5 p-3 rounded-md ${submitResult.success ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
          {submitResult.message}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="ad_soyad" className="block text-sm font-medium text-gray-700 mb-1">Ad Soyad *</label>
          <input
            type="text"
            id="ad_soyad"
            name="ad_soyad"
            value={formData.ad_soyad}
            onChange={handleInputChange}
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
            required
          />
        </div>
        
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">E-posta *</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
            required
          />
        </div>
        
        <div>
          <label htmlFor="telefon" className="block text-sm font-medium text-gray-700 mb-1">Telefon *</label>
          <input
            type="tel"
            id="telefon"
            name="telefon"
            value={formData.telefon}
            onChange={handleInputChange}
            placeholder="5XXXXXXXXX"
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
            required
          />
        </div>
        
        <div>
          <label htmlFor="pozisyon" className="block text-sm font-medium text-gray-700 mb-1">Başvurulan Pozisyon *</label>
          <select
            id="pozisyon"
            name="pozisyon"
            value={formData.pozisyon}
            onChange={handleInputChange}
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
            required
          >
            <option value="">Pozisyon Seçiniz</option>
            <option value="Şef/Aşçı">Şef/Aşçı</option>
            <option value="Garson/Servis">Garson/Servis Elemanı</option>
            <option value="Şube Müdürü">Şube Müdürü</option>
            <option value="Diğer">Diğer</option>
          </select>
        </div>
        
        <div>
          <label htmlFor="sube" className="block text-sm font-medium text-gray-700 mb-1">Tercih Edilen Şube</label>
          <select
            id="sube"
            name="sube"
            value={formData.sube}
            onChange={handleInputChange}
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            <option value="">Şube Seçiniz</option>
            <option value="İzmir Bayraklı">İzmir Bayraklı</option>
            <option value="İzmir Edremit">İzmir Edremit</option>
            <option value="Ankara">Ankara</option>
            <option value="İstanbul">İstanbul</option>
            <option value="Diğer">Diğer</option>
          </select>
        </div>
        
        <div>
          <label htmlFor="deneyim" className="block text-sm font-medium text-gray-700 mb-1">Deneyim (Yıl)</label>
          <input
            type="number"
            id="deneyim"
            name="deneyim"
            value={formData.deneyim}
            onChange={handleInputChange}
            min="0"
            max="50"
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
          />
        </div>
        
        <div>
          <label htmlFor="cv" className="block text-sm font-medium text-gray-700 mb-1">CV Yükle</label>
          <input
            type="file"
            id="cv"
            name="cv"
            onChange={handleFileChange}
            accept=".pdf,.doc,.docx"
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
          />
          <p className="text-xs text-gray-500 mt-1">PDF, DOC veya DOCX formatında</p>
        </div>
        
        <div>
          <label htmlFor="mesaj" className="block text-sm font-medium text-gray-700 mb-1">Ek Bilgiler</label>
          <textarea
            id="mesaj"
            name="mesaj"
            value={formData.mesaj}
            onChange={handleInputChange}
            rows={4}
            placeholder="Kendinizi tanıtın..."
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500"
          />
        </div>
        
        <div>
          <label className="flex items-start">
            <input
              type="checkbox"
              name="kvkk"
              checked={formData.kvkk}
              onChange={handleInputChange}
              className="mt-1 h-4 w-4 text-primary-600"
              required
            />
            <span className="ml-2 text-sm text-gray-700">
              <a href="/kisisel-verilerin-korunmasi" target="_blank" className="text-primary-600 hover:text-primary-800">
                KVKK Aydınlatma Metni
              </a>'ni okudum ve kabul ediyorum.
            </span>
          </label>
        </div>
        
        <div className="mt-4">
          <div className="g-recaptcha" data-sitekey="6LdnK4IaAAAAAF8dCYxS9oMNMEq5jjHxZOB--4-k"></div>
        </div>
        
        <div className="mt-6">
          <button
            type="submit"
            className="w-full bg-primary-600 hover:bg-primary-700 text-white font-bold py-3 px-4 rounded-md transition duration-200"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'GÖNDERİLİYOR...' : 'BAŞVURU GÖNDER'}
          </button>
        </div>
      </form>
    </div>
  );
}
```

### 4. Açık Pozisyonlar Verisi
```tsx
// src/data/positions.ts
export const openPositions = [
  {
    title: 'Şef / Aşçı',
    description: 'Deneyimli şef ve aşçı arkadaşlarımızı takımımıza katılmaya davet ediyoruz.',
    requirements: [
      'En az 2 yıl deneyim',
      'Hijyen kurallarına uyum',
      'Takım çalışmasına yatkınlık'
    ]
  },
  {
    title: 'Garson / Servis Elemanı',
    description: 'Müşteri odaklı ve güleryüzlü servis elemanları arıyoruz.',
    requirements: [
      'İyi iletişim becerileri',
      'Müşteri hizmetleri deneyimi',
      'Takım çalışmasına uyum'
    ]
  },
  {
    title: 'Şube Müdürü',
    description: 'Operasyonel süreçleri yönetecek deneyimli müdür adayları.',
    requirements: [
      'Yönetim deneyimi',
      'Liderlik becerileri',
      'Restoran sektörü bilgisi'
    ]
  }
];
```

### 5. reCAPTCHA Script Entegrasyonu
```tsx
// src/app/kariyer/layout.tsx
export default function KariyerLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      {children}
      {/* reCAPTCHA Script */}
      <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </>
  );
}
```

## Ana Sayfa Bileşeni
```tsx
// src/app/kariyer/page.tsx
import { Metadata } from 'next';
import { openPositions } from '@/data/positions';
import JobApplicationForm from '@/components/JobApplicationForm';

export const metadata: Metadata = {
  title: 'Kariyer - Pide By Pide',
  description: 'Pide By Pide ile kariyer yapmak için başvuru formu.',
  keywords: 'Kariyer, iş başvurusu, Pide By Pide kariyer, iş imkanları',
};

// Pozisyon Kartı Bileşeni
function PositionCard({ title, description, requirements }: {
  title: string;
  description: string;
  requirements: string[];
}) {
  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow p-5 mb-4">
      <h3 className="text-lg md:text-xl font-bold text-primary-800 mb-2">{title}</h3>
      <p className="text-gray-700 mb-3">{description}</p>
      <ul className="list-disc list-inside space-y-1 text-gray-600">
        {requirements.map((requirement, index) => (
          <li key={index}>{requirement}</li>
        ))}
      </ul>
    </div>
  );
}

export default function KariyerPage() {
  return (
    <main className="min-h-screen bg-gray-50">
      {/* Hero Bölümü */}
      <section className="bg-primary-50 py-12 md:py-20">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-extrabold text-primary-800 text-center mb-4">
            KARİYER
          </h1>
          <nav className="flex justify-center" aria-label="Breadcrumb">
            <ol className="flex items-center space-x-2 text-sm text-gray-500">
              <li>
                <a href="/" className="hover:text-primary-700">Anasayfa</a>
              </li>
              <li>
                <span className="mx-2">/</span>
              </li>
              <li className="font-medium text-gray-700">Kariyer</li>
            </ol>
          </nav>
        </div>
      </section>

      {/* İçerik Bölümü */}
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Kariyer Bilgileri ve Açık Pozisyonlar */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow p-6 md:p-8 mb-8">
              <h2 className="text-2xl md:text-3xl font-bold text-primary-800 mb-4">Pide By Pide Ailesi</h2>
              
              <p className="text-base md:text-lg text-gray-700 mb-6">
                Pide By Pide ailesi olarak, dinamik ve gelişime açık ekip arkadaşları arıyoruz. 
                Misafirlerimize en kaliteli hizmeti sunmak için tutkulu ve deneyimli profesyonelleri 
                takımımıza katmaktan mutluluk duyarız.
              </p>
              
              <div className="mb-8">
                <h3 className="text-xl md:text-2xl font-bold text-primary-700 mb-3">Neden Pide By Pide?</h3>
                <ul className="list-disc list-inside space-y-2 text-gray-700">
                  <li>Gelişen ve büyüyen bir marka</li>
                  <li>Profesyonel çalışma ortamı</li>
                  <li>Kariyer gelişim fırsatları</li>
                  <li>Eğitim ve gelişim programları</li>
                  <li>Rekabetçi maaş ve yan haklar</li>
                </ul>
              </div>
              
              <h3 className="text-xl md:text-2xl font-bold text-primary-700 mb-4">Açık Pozisyonlar</h3>
              
              <div className="space-y-4">
                {openPositions.map((position, index) => (
                  <PositionCard
                    key={index}
                    title={position.title}
                    description={position.description}
                    requirements={position.requirements}
                  />
                ))}
              </div>
            </div>
          </div>
          
          {/* Başvuru Formu */}
          <div className="lg:col-span-1">
            <JobApplicationForm />
          </div>
        </div>
      </div>
    </main>
  );
}
```

## API Endpoint (Form Gönderimi için)

Form gönderimi için bir API endpoint'i oluşturulmalıdır:

```tsx
// src/app/api/kariyer-basvuru/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    
    // Gerekli alanların kontrolü
    const ad_soyad = formData.get('ad_soyad') as string;
    const email = formData.get('email') as string;
    const telefon = formData.get('telefon') as string;
    const pozisyon = formData.get('pozisyon') as string;
    const sube = formData.get('sube') as string;
    const deneyim = formData.get('deneyim') as string;
    const mesaj = formData.get('mesaj') as string;
    const kvkk = formData.get('kvkk') as string;
    
    const cv = formData.get('cv') as File | null;
    
    // Zorunlu alanların kontrolü
    if (!ad_soyad || !email || !telefon || !pozisyon || !kvkk) {
      return NextResponse.json({ 
        success: false, 
        message: 'Lütfen zorunlu alanları doldurunuz.' 
      }, { status: 400 });
    }
    
    // E-posta formatı kontrolü
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json({ 
        success: false, 
        message: 'Geçerli bir e-posta adresi giriniz.' 
      }, { status: 400 });
    }
    
    // CV dosyası kontrolü (varsa)
    if (cv && cv instanceof File) {
      // Dosya boyutu kontrolü (maksimum 5MB)
      if (cv.size > 5 * 1024 * 1024) {
        return NextResponse.json({ 
          success: false, 
          message: 'CV dosyası 5MB\'dan büyük olamaz.' 
        }, { status: 400 });
      }
      
      // Dosya formatı kontrolü
      const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
      if (!allowedTypes.includes(cv.type)) {
        return NextResponse.json({ 
          success: false, 
          message: 'CV dosyası yalnızca PDF, DOC veya DOCX formatında olabilir.' 
        }, { status: 400 });
      }
    }
    
    // E-posta veya veritabanı işlemleri burada yapılacak
    // ...
    
    return NextResponse.json({ 
      success: true, 
      message: 'Başvurunuz başarıyla alınmıştır. En kısa sürede sizinle iletişime geçeceğiz.' 
    });
    
  } catch (error) {
    console.error('Başvuru gönderimi hatası:', error);
    return NextResponse.json({ 
      success: false, 
      message: 'İşleminiz sırasında bir hata oluştu. Lütfen daha sonra tekrar deneyiniz.' 
    }, { status: 500 });
  }
}
```

## Önemli Notlar ve Talimatlar

1. **İçerik Yapısı**:
   - Mobil görünümde form, içerik bölümünün altında gösterilecek
   - Masaüstü görünümde iki sütunlu yapı olacak (içerik sol, form sağ)

2. **Responsive Tasarım**:
   - Mobil öncelikli yaklaşım kullan
   - Pozisyon kartları mobilde yeterince okunabilir olmalı
   - Form elemanları mobil cihazlarda kullanımı kolay olacak şekilde boyutlandırılmalı

3. **Form İşlemleri**:
   - CV yüklemesi için dosya tiplerini ve boyutunu kontrol et
   - Form validasyonlarını hem client-side hem server-side olarak uygula
   - Başarı/hata mesajları kullanıcıya açık ve anlaşılır olmalı

4. **CV Yükleme Özellikleri**:
   - Yalnızca belirtilen dosya formatlarına izin ver (PDF, DOC, DOCX)
   - Dosya boyutunu sınırla (max 5MB)
   - Yüklenen dosyanın adını ve formatını kullanıcıya göster

5. **Güvenlik Önlemleri**:
   - reCAPTCHA entegrasyonu ile bot koruması sağla
   - Form gönderiminde CSRF koruması uygula
   - Kullanıcı girdilerini server-side olarak doğrula

6. **Erişilebilirlik**:
   - Form elemanlarına uygun etiketler ve ARIA öznitelikleri ekle
   - Renk kontrastını doğru şekilde ayarla
   - Klavye navigasyonunu destekle
   - Hata mesajlarını screen reader'lar için erişilebilir yap

7. **Performans İyileştirmeleri**:
   - Form bileşenini lazy loading olarak yükle
   - reCAPTCHA script'ini yalnızca gerektiğinde yükle

8. **Kullanıcı Deneyimi İyileştirmeleri**:
   - Form gönderimi sırasında loading state göster
   - İşlem başarılı olduğunda kullanıcıya açık bir bildirim göster
   - Zorunlu alanları açıkça belirt
   - İnputlarda uygun placeholder'lar kullan

Bu prompt ile "Kariyer" sayfasını orijinal içeriğini ve tasarım unsurlarını koruyarak Next.js yapısına uyarlamalı ve responsive tasarım prensiplerini uygulamalısın.