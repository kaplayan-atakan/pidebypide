# Prompt: Pidebypide Responsive Tasarım İyileştirme Planı

```markdown
# Pidebypide Projesi Responsive Tasarım İyileştirmeleri

## Hedef
Pidebypide web uygulamasını tüm cihaz boyutlarında mükemmel çalışacak şekilde responsive hale getirmek.

## Görev Listesi

### 1. Görsel Optimizasyonu
- **Aksiyon**: Tüm standart `<img>` etiketlerini Next.js `Image` bileşeni ile değiştir
- **Uygulama**:
  ```tsx
  // ESKİ
  <img src="/images/pide.jpg" alt="Pide" />
  
  // YENİ
  import Image from "next/image";
  
  <Image 
    src="/images/pide.jpg" 
    alt="Pide" 
    width={700} 
    height={475} 
    sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" 
    className="w-full h-auto" 
  />
  ```
- **Not**: Ana görsellere `priority={true}` ekleyerek LCP iyileştirmesi yapın

### 2. Responsive Layout İyileştirmeleri
- **Aksiyon**: Tüm sayfalardaki layout yapılarını responsive breakpoint'ler kullanarak güncelle
- **Uygulama**:
  ```tsx
  // ESKİ
  <div className="flex">
    <div className="w-1/3">Sidebar</div>
    <div className="w-2/3">Main Content</div>
  </div>
  
  // YENİ
  <div className="flex flex-col md:flex-row">
    <div className="w-full md:w-1/3 lg:w-1/4">Sidebar</div>
    <div className="w-full md:w-2/3 lg:w-3/4">Main Content</div>
  </div>
  ```

- **Konteyner Yapısı**:
  ```tsx
  <div className="container mx-auto px-4 sm:px-6 lg:px-8">
    {/* İçerik */}
  </div>
  ```

- **Grid Yapısı**:
  ```tsx
  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
    {/* Kart öğeleri */}
  </div>
  ```

### 3. Responsive Tipografi
- **Aksiyon**: Font boyutlarını ve boşlukları responsive hale getir
- **Uygulama**:
  ```tsx
  // ESKİ
  <h1 className="text-3xl font-bold">Başlık</h1>
  <p className="text-base">İçerik</p>
  
  // YENİ
  <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold tracking-tight">Başlık</h1>
  <p className="text-sm md:text-base leading-relaxed">İçerik</p>
  ```

### 4. Mobil Navigasyon
- **Aksiyon**: Hamburger menü ve mobil navigasyon ekle
- **Uygulama**:
  ```tsx
  // NavBar.tsx içine ekle
  'use client';
  import { useState } from 'react';
  
  export function NavBar() {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    
    return (
      <nav>
        {/* Logo ve normal navbar */}
        <div className="flex justify-between items-center">
          <Logo />
          
          {/* Desktop navigation */}
          <div className="hidden md:flex space-x-6">
            <NavLinks />
          </div>
          
          {/* Mobil hamburger butonu */}
          <button 
            className="md:hidden p-2" 
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            aria-label="Menüyü aç/kapa"
          >
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              {isMenuOpen ? (
                <path d="M6 18L18 6M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              ) : (
                <path d="M4 6H20M4 12H20M4 18H20" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              )}
            </svg>
          </button>
        </div>
        
        {/* Mobil dropdown menü */}
        {isMenuOpen && (
          <div className="md:hidden py-4 space-y-2">
            <MobileNavLinks />
          </div>
        )}
      </nav>
    );
  }
  ```

### 5. Viewport ve Meta Tag Düzenlemeleri
- **Aksiyon**: layout.tsx dosyasındaki meta etiketlerini düzenle
- **Uygulama**:
  ```tsx
  // src/app/layout.tsx
  export const metadata = {
    title: 'PideByPide',
    description: 'Türkiye\'nin en lezzetli pideleri',
    viewport: 'width=device-width, initial-scale=1, maximum-scale=5',
  };
  ```

### 6. Dokunmatik Ekran İyileştirmeleri
- **Aksiyon**: Tüm tıklanabilir öğelerin dokunmatik cihazlar için minimum 44x44px alanı olmasını sağla
- **Uygulama**:
  ```tsx
  // ESKİ
  <button className="p-2">Tıkla</button>
  
  // YENİ
  <button className="p-3 min-h-[44px] min-w-[44px]">Tıkla</button>
  ```

### 7. Medya Sorguları ve Koşullu Render
- **Aksiyon**: Gerektiğinde ekran boyutuna göre farklı bileşenler göster
- **Uygulama**:
  ```tsx
  'use client';
  import { useEffect, useState } from 'react';
  
  export function ResponsiveLayout() {
    const [isMobile, setIsMobile] = useState(false);
    
    useEffect(() => {
      if (typeof window !== 'undefined') {
        const handleResize = () => setIsMobile(window.innerWidth < 768);
        handleResize(); // İlk yüklenmede kontrol et
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
      }
    }, []);
    
    return (
      <div>
        {isMobile ? <MobileComponent /> : <DesktopComponent />}
      </div>
    );
  }
  ```

### 8. CSS Utility Fonksiyonları
- **Aksiyon**: Media query kullanımını kolaylaştırmak için Tailwind CSS'in tüm responsive özelliklerini kullan
- **Önemli sınıflar**:
  - `sm:` - 640px ve üzeri
  - `md:` - 768px ve üzeri
  - `lg:` - 1024px ve üzeri
  - `xl:` - 1280px ve üzeri
  - `2xl:` - 1536px ve üzeri