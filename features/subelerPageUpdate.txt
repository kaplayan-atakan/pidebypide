# Prompt: PideByPide "Şubeler" Sayfası Revizyonu (Interaktif Harita ile)

```markdown
# PideByPide "Şubeler" Sayfası Revizyonu

## Görev Tanımı
Mevcut `temp copy\subeler.html` dosyasını içerik ve tasarım unsurlarını koruyarak Next.js yapısına uygun şekilde revize et. Anasayfadaki tasarım standartlarını uygularken, var olan `BranchFinder` bileşenindeki interaktif Türkiye haritasını da kullanacağız.

## Sayfa Yapısı
Yeni dosya yolu: `src/app/subeler/page.tsx`
URL: `/subeler`

## Mevcut Durum ve Kaynaklar
1. `temp copy\subeler.html`: Eski web sitesinden alınan, korunacak içerik ve tasarım elementlerini içeren HTML
2. `src/components/UI/BranchFinder.tsx`: Mevcut interaktif Türkiye haritası bileşeni
3. Anasayfadaki (`src/app/page.tsx`) tasarım standartları referans alınacak
4. Meta verileri: Başlık ve açıklama mevcut HTML'den alınmalı

## Teknik İyileştirme Gereksinimleri

### 1. Metadata Optimizasyonu
```tsx
export const metadata = {
  title: 'Şubeler - Pide By Pide',
  description: 'Pide By Pide şubelerimiz Türkiye\'nin birçok ilinde hizmet vermektedir. En yakın şubemizi bulun.',
  keywords: 'Şubeler, Pide By Pide şubeler, lokasyon, adres, telefon'
};
```

### 2. Şube Kartı Bileşeni
```tsx
interface SubeProps {
  id: string;
  title: string;
  address: string;
  phone: string;
  mapUrl: string;
}

function SubeCard({ id, title, address, phone, mapUrl }: SubeProps) {
  return (
    <div id={id} className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow p-5 h-full">
      <h3 className="text-xl font-bold text-[#14543c] mb-3">{title}</h3>
      <div className="space-y-3 text-gray-700">
        <div className="flex items-start">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 text-[#f29b24] flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
          </svg>
          <span>{address}</span>
        </div>
        <div className="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-[#f29b24] flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
          </svg>
          <a href={`tel:${phone.replace(/\s/g, '')}`} className="text-[#14543c] hover:text-[#0f3d2a]">{phone}</a>
        </div>
        <div className="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-[#f29b24] flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
          </svg>
          <a href={mapUrl} target="_blank" rel="noopener noreferrer" className="text-[#14543c] hover:text-[#0f3d2a]">
            Harita için tıklayınız
          </a>
        </div>
      </div>
    </div>
  );
}
```

### 3. Şubeler Verisi

// Şubeleri şehirlere göre grupla
export const groupBranchesByCity = () => {
  const cityGroups: { [key: string]: typeof subeler } = {};
  
  subeler.forEach(sube => {
    if (!cityGroups[sube.cityValue]) {
      cityGroups[sube.cityValue] = [];
    }
    cityGroups[sube.cityValue].push(sube);
  });
  
  return cityGroups;
};
```

## Ana Sayfa Bileşeni
```tsx
// src/app/subeler/page.tsx
import { Metadata } from 'next';
import Link from 'next/link';
import { subeler } from '@/data/subeler';
import BranchFinder from '@/components/UI/BranchFinder'; // BranchFinder bileşenini import et

export const metadata: Metadata = {
  title: 'Şubeler - Pide By Pide',
  description: 'Pide By Pide şubelerimiz Türkiye\'nin birçok ilinde hizmet vermektedir. En yakın şubemizi bulun.',
  keywords: 'Şubeler, Pide By Pide şubeler, lokasyon, adres, telefon',
};

interface SubeCardProps {
  id: string;
  title: string;
  address: string;
  phone: string;
  mapUrl: string;
}

function SubeCard({ id, title, address, phone, mapUrl }: SubeCardProps) {
  return (
    <div id={id} className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow p-5 h-full">
      <h3 className="text-xl font-bold text-[#14543c] mb-3">{title}</h3>
      <div className="space-y-3 text-gray-700">
        <div className="flex items-start">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 text-[#f29b24] flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
          </svg>
          <span>{address}</span>
        </div>
        <div className="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-[#f29b24] flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
          </svg>
          <a href={`tel:${phone.replace(/\s/g, '')}`} className="text-[#14543c] hover:text-[#0f3d2a]">{phone}</a>
        </div>
        <div className="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-[#f29b24] flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
          </svg>
          <a href={mapUrl} target="_blank" rel="noopener noreferrer" className="text-[#14543c] hover:text-[#0f3d2a]">
            Harita için tıklayınız
          </a>
        </div>
      </div>
    </div>
  );
}

export default function SubelerPage() {
  // Şehir gruplarına göre şubeleri düzenle
  const cityGroups: { [key: string]: { name: string, subeList: SubeCardProps[] } } = {};
  
  subeler.forEach(sube => {
    const cityValue = sube.cityValue || 'diger';
    const cityName = cityValue.charAt(0).toUpperCase() + cityValue.slice(1);
    
    if (!cityGroups[cityValue]) {
      cityGroups[cityValue] = {
        name: cityName,
        subeList: []
      };
    }
    
    cityGroups[cityValue].subeList.push(sube);
  });

  return (
    <main className="min-h-screen bg-gray-50">
      {/* Hero Bölümü */}
      <section className="bg-primary-50 py-12 md:py-20">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-extrabold text-[#14543c] text-center mb-4">
            ŞUBELER
          </h1>
          <nav className="flex justify-center" aria-label="Breadcrumb">
            <ol className="flex items-center space-x-2 text-sm text-gray-500">
              <li>
                <Link href="/" className="hover:text-[#f29b24]">Anasayfa</Link>
              </li>
              <li>
                <span className="mx-2">/</span>
              </li>
              <li className="font-medium text-gray-700">Şubeler</li>
            </ol>
          </nav>
        </div>
      </section>

      {/* İnteraktif Harita Bölümü */}
      <section className="py-8 md:py-12">
        <div className="container mx-auto px-4">
          <div className="mb-10 text-center">
            <h2 className="text-2xl md:text-3xl font-bold text-[#14543c] mb-4">Türkiye Genelindeki Lokasyonlarımız</h2>
            <p className="text-lg text-[#7b7934]">
              Haritada şehirlere tıklayarak veya aşağıdan şehir seçerek şubelerimize ulaşabilirsiniz.
            </p>
          </div>
          
          {/* BranchFinder bileşenini dahil et */}
          <BranchFinder />
        </div>
      </section>
      
      {/* Şubeler Listesi */}
      <section className="py-8 md:py-12 bg-gray-100">
        <div className="container mx-auto px-4">
          <h2 className="text-2xl md:text-3xl font-bold text-[#14543c] mb-8 text-center">Tüm Şubelerimiz</h2>
          
          {/* Şehir Başlıklarına Göre Gruplandırılmış Şubeler */}
          <div className="space-y-10">
            {Object.entries(cityGroups).map(([cityValue, { name, subeList }]) => (
              <div key={cityValue} id={cityValue} className="scroll-mt-24">
                <h3 className="text-xl md:text-2xl font-bold text-[#f29b24] mb-4 border-b border-[#f29b24] pb-2">
                  {name} <span className="text-[#7b7934] text-lg">({subeList.length} şube)</span>
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
                  {subeList.map(sube => (
                    <SubeCard
                      key={sube.id}
                      id={sube.id}
                      title={sube.title}
                      address={sube.address}
                      phone={sube.phone}
                      mapUrl={sube.mapUrl}
                    />
                  ))}
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-12 bg-blue-50 border-l-4 border-[#14543c] p-4 rounded-md">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-[#14543c]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm md:text-base text-[#14543c]">
                  <strong>Not:</strong> Daha fazla şube bilgisi için lütfen bizimle iletişime geçin. Sürekli büyüyen şube ağımızla size en yakın noktada hizmet vermeye devam ediyoruz.
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>
  );
}
```

## Entegrasyonda Dikkat Edilecek Noktalar

1. **BranchFinder Bileşeni ile Entegrasyon**
   - BranchFinder'daki interaktif harita şubeler sayfasında direkt olarak kullanılacak
   - BranchFinder içindeki şehir-şube eşleşmeleri güncellenmeli/senkronize edilmeli
   - Etkileşimli haritada şehre tıklayınca Şubeler listesindeki ilgili şehir bölümüne scroll yapılmalı

2. **Sayfa İçi Navigasyon**
   - Şehir ID'leri (`#istanbul`, `#izmir` gibi) ile hash URL navigasyonu 
   - URL'den gelen fragment ID'leri ile otomatik scroll
   - Şehirden şehre kolay geçiş için dropdown menüler

3. **Responsive Tasarım**
   - BranchFinder mobil görünümünde tek sütunlu tasarım kullanır
   - Şube kartları mobilde tek sütun, tablet ve desktop'ta iki sütun olarak gösterilmeli
   - İçerik küçük ekranlarda da okunabilir olmalı

4. **Kurumsal Renk Şeması**
   - Metin renkleri: `#14543c` (koyu yeşil) ve `#7b7934` (zeytin yeşili)
   - Vurgu rengi: `#f29b24` (turuncu)
   - İkonların vurgu renkleriyle uyumu
   - Kartlarda hover efektleri

5. **Performans Optimizasyonu**
   - BranchFinder bileşeni client-component olarak işaretlenmiş, sayfa yüklenirken gecikmelere dikkat edilmeli
   - İnteraktif harita yüklenmesi esnasında loading state gösterilmeli
   - Şube verilerinin verimli şekilde organize edilmesi

Bu prompt ile "Şubeler" sayfasını mevcut interaktif Türkiye haritası bileşenini kullanarak revize etmelisin. Şehirlere göre gruplanmış şube listesi ve responsive bir tasarım, kullanıcı deneyimini iyileştirecektir.
